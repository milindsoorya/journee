// Prisma schema for the JournÃ©e Trip Planner
// Uses PostgreSQL so it can run against Prisma Accelerate or a direct connection.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum TripVersionStatus {
  final
  draft
}

model User {
  id         String        @id @default(cuid())
  name       String
  email      String        @unique
  avatarUrl  String?
  trips      Trip[]
  notes      Note[]
  messages   ChatMessage[]
}

model Trip {
  id        String         @id @default(cuid())
  title     String
  icon      String         @default("ðŸ§³")
  isFolder  Boolean        @default(false)
  createdAt DateTime       @default(now())
  ownerId   String
  owner     User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  versions  TripVersion[]
  messages  ChatMessage[]
}

model TripVersion {
  id        String            @id @default(cuid())
  name      String
  status    TripVersionStatus @default(draft)
  createdAt DateTime          @default(now())
  tripId    String
  trip      Trip              @relation(fields: [tripId], references: [id], onDelete: Cascade)
  notes     Note[]
}

model Note {
  id            String      @id @default(cuid())
  content       String
  timestamp     DateTime    @default(now())
  authorId      String
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tripVersionId String?
  tripVersion   TripVersion? @relation(fields: [tripVersionId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id        String   @id @default(cuid())
  message   String
  timestamp DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tripId    String?
  trip      Trip?    @relation(fields: [tripId], references: [id], onDelete: Cascade)
}
